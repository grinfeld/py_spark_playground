---
x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  env_file:
    - ./env.minio.example
  environment:
    &airflow-common-env
    AIRFLOW_CONN_SPARK_DEFAULT: spark://@spark-master:7077
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    AIRFLOW__CORE__AUTH_MANAGER: "airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager"
    AIRFLOW__FAB__SESSION_BACKEND: "securecookie"
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Asia/Jerusalem
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-webserver:8080/execution/'
    AIRFLOW__API_AUTH__JWT_SECRET: stam
    AIRFLOW__API_AUTH__JWT_ISSUER: http://airflow-webserver:8080
    TZ: Asia/Jerusalem
    # PySpark and Java environment
    SPARK_HOME: /opt/spark
    SPARK_MASTER_URL: spark://spark-master:7077
  depends_on:
    - postgres
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
    - ./requirements.txt:/opt/airflow/requirements.txt
    - ./ivy:/home/airflow/.ivy2
    - ./events:/opt/spark/events
    - ./spark-logs:/opt/spark/logs
  networks:
    - spark-network

---
x-spark-common:
  &spark-common
  build:
    context: .
    dockerfile: Dockerfile.spark
  env_file:
    - ./env.minio.example
  environment:
    &spark-worker-common-env
    SPARK_MASTER_URL: spark://spark-master:7077
    SPARK_RPC_AUTHENTICATION_ENABLED: no
    SPARK_RPC_ENCRYPTION_ENABLED: no
    SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
    SPARK_SSL_ENABLED: no
  volumes:
    - ./data:/app/data:ro
    - ./events:/opt/spark/events
    - ./spark-logs:/opt/spark/logs
  networks:
    - spark-network
  restart: unless-stopped

services:
  # Apache Airflow
  airflow-webserver:
    <<: *airflow-common
    depends_on:
      - airflow-init
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/monitor/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    depends_on:
      - airflow-init
    command: scheduler
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - airflow-init

  airflow-trigger:
    <<: *airflow-common
    command: triggerer
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - airflow-init

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - postgres
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./requirements.txt:/opt/airflow/requirements.txt
    command: >
      bash -c "
        airflow db migrate && \
        airflow fab-db migrate && \
        airflow users create \
                  --username admin \
                  --firstname FIRST_NAME \
                  --lastname LAST_NAME \
                  --role Admin \
                  --email admin@example.org \
                  --password admin || true
      "
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: on-failure
    networks:
      - spark-network

  # PostgreSQL for Airflow metadata
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - spark-network

  # MinIO for local S3-compatible storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - ./env.minio.example
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always
    networks:
      - spark-network

  # MinIO Client for setup (bucket creation and policies)
  minio-client:
    image: minio/mc:latest
    container_name: minio-client-airflow
    depends_on:
      - minio
    env_file:
      - ./env.minio.example
    entrypoint: ["sh", "-c", "/scripts/minio-init.sh"]
    volumes:
      - ./scripts/minio-init.sh:/scripts/minio-init.sh
      - ./data:/examples
    networks:
      - spark-network

  # Spark Master
  spark-master:
    <<: *spark-common
    container_name: spark-master
    depends_on:
      - minio
      - minio-client
    environment:
      SPARK_MODE: master
    ports:
      - "8081:8080"  # Spark Master UI (8080 inside container)
      - "7077:7077"  # Spark Master RPC
    entrypoint: >
      sh -c "
        sleep 15 &&
        /opt/spark/sbin/start-master.sh &&
        tail -f /opt/spark/logs/spark-*-org.apache.spark.deploy.master.Master-*.out
      "

  # Spark Worker 1
  spark-worker-1:
    <<: *spark-common
    container_name: spark-worker-1
    depends_on:
      - spark-master
    environment:
      <<: *spark-worker-common-env
      SPARK_MODE: worker
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1
    entrypoint: >
      sh -c "
        sleep 20 &&
        /opt/spark/sbin/start-worker.sh spark://spark-master:7077 &&
        tail -f /opt/spark/logs/spark-*-org.apache.spark.deploy.worker.Worker-*.out
      "

  # Spark Worker 2
  spark-worker-2:
    <<: *spark-common
    container_name: spark-worker-2
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1
    entrypoint: >
      sh -c "
        sleep 20 &&
        /opt/spark/sbin/start-worker.sh spark://spark-master:7077 &&
        tail -f /opt/spark/logs/spark-*-org.apache.spark.deploy.worker.Worker-*.out
      "

  # Spark Worker 3
  spark-worker-3:
    <<: *spark-common
    container_name: spark-worker-3
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1
    entrypoint: >
      sh -c "
        sleep 20 &&
        /opt/spark/sbin/start-worker.sh spark://spark-master:7077 &&
        tail -f /opt/spark/logs/spark-*-org.apache.spark.deploy.worker.Worker-*.out
      "

  spark-history-server:
    <<: *spark-common
    container_name: spark-history-server
    entrypoint: /bin/bash
    command: -c "/opt/spark/sbin/start-history-server.sh; tail -f /dev/null"
    ports:
      - '18080:18080'

volumes:
  postgres-db-volume:
  minio-data:

networks:
  spark-network:
