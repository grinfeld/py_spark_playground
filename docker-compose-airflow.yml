services:
  # Apache Airflow
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - airflow-init
    command: api-server
    env_file:
      - ./env.minio.example
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
      AIRFLOW__CORE__AUTH_MANAGER: "airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager"
      AIRFLOW__FAB__SESSION_BACKEND: "securecookie"
      # PySpark and Java environment
      JAVA_HOME: /usr/local/openjdk-17
      SPARK_HOME: /opt/spark
      SPARK_MASTER_URL: spark://spark-master:7077
      # Spark job configuration (can be overridden by env_file)
      CATALOG_NAME: ${CATALOG_NAME:-spark_catalog}
      CATALOG_IO_IMPL: ${CATALOG_IO_IMPL:-org.apache.iceberg.aws.s3.S3FileIO}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./requirements.txt:/opt/airflow/requirements.txt
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/monitor/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - spark-network

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - airflow-init
    command: scheduler
    env_file:
      - ./env.minio.example
    environment:
      <<: *airflow-common-env
      SPARK_MASTER_URL: spark://spark-master:7077
      # Spark job configuration (can be overridden by env_file)
      CATALOG_NAME: ${CATALOG_NAME:-spark_catalog}
      CATALOG_IO_IMPL: ${CATALOG_IO_IMPL:-org.apache.iceberg.aws.s3.S3FileIO}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./requirements.txt:/opt/airflow/requirements.txt
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - spark-network

  airflow-dag-processor:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - airflow-init
    command: dag-processor
    env_file:
      - ./env.minio.example
    environment:
      <<: *airflow-common-env
      SPARK_MASTER_URL: spark://spark-master:7077
      # Spark job configuration (can be overridden by env_file)
      CATALOG_NAME: ${CATALOG_NAME:-spark_catalog}
      CATALOG_IO_IMPL: ${CATALOG_IO_IMPL:-org.apache.iceberg.aws.s3.S3FileIO}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./requirements.txt:/opt/airflow/requirements.txt
    restart: always
    networks:
      - spark-network

  airflow-trigger:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - airflow-init
    command: triggerer
    env_file:
      - ./env.minio.example
    environment:
      <<: *airflow-common-env
      SPARK_MASTER_URL: spark://spark-master:7077
      # Spark job configuration (can be overridden by env_file)
      CATALOG_NAME: ${CATALOG_NAME:-spark_catalog}
      CATALOG_IO_IMPL: ${CATALOG_IO_IMPL:-org.apache.iceberg.aws.s3.S3FileIO}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./requirements.txt:/opt/airflow/requirements.txt
    restart: always
    networks:
      - spark-network

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - postgres
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./requirements.txt:/opt/airflow/requirements.txt
    command: >
      bash -c "
        airflow db migrate && \
        airflow fab-db migrate \
        airflow users create \
                  --username admin \
                  --firstname FIRST_NAME \
                  --lastname LAST_NAME \
                  --role Admin \
                  --email admin@example.org \
                  --password admin
      "
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: on-failure
    networks:
      - spark-network

  # PostgreSQL for Airflow metadata
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - spark-network

  # MinIO for local S3-compatible storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - ./env.minio.example
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always
    networks:
      - spark-network

  # MinIO Client for setup (bucket creation and policies)
  minio-client:
    image: minio/mc:latest
    container_name: minio-client-airflow
    depends_on:
      - minio
    env_file:
      - ./env.minio.example
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: >
      sh -c "
        sleep 10 &&
        mc alias set myminio http://minio:9000 minioadmin minioadmin &&
        mc mb myminio/spark-data || true &&
        mc mb myminio/spark-output || true &&
        mc mb myminio/spark-checkpoints || true &&
        mc policy set public myminio/spark-data || true &&
        mc policy set public myminio/spark-output || true &&
        mc policy set public myminio/spark-checkpoints || true &&
        echo 'MinIO setup completed'
      "
    networks:
      - spark-network

  # Spark Master
  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-master
    depends_on:
      - minio
      - minio-client
    env_file:
      - ./env.minio.example
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT:-http://minio:9000}
      - STORAGE_ACCESS_KEY_ID=${STORAGE_ACCESS_KEY_ID:-minioadmin}
      - STORAGE_SECRET_KEY=${STORAGE_SECRET_KEY:-minioadmin}
      - STORAGE_BUCKET=${STORAGE_BUCKET:-spark-data}
    ports:
      - "8081:8080"  # Spark Master UI (8080 inside container)
      - "7077:7077"  # Spark Master RPC
    volumes:
      - ./data:/app/data:ro
      - ./output:/app/output
      - spark_logs:/opt/spark/logs
      - spark_work:/opt/spark/work
    networks:
      - spark-network
    restart: unless-stopped
    command: >
      sh -c "
        sleep 15 &&
        /opt/spark/sbin/start-master.sh &&
        tail -f /opt/spark/logs/spark-*-org.apache.spark.deploy.master.Master-*.out
      "

  # Spark Worker 1
  spark-worker-1:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker-1
    depends_on:
      - spark-master
      - minio
    env_file:
      - ./env.minio.example
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT:-http://minio:9000}
      - STORAGE_ACCESS_KEY_ID=${STORAGE_ACCESS_KEY_ID:-minioadmin}
      - STORAGE_SECRET_KEY=${STORAGE_SECRET_KEY:-minioadmin}
    volumes:
      - ./data:/app/data:ro
      - ./output:/app/output
      - spark_logs:/opt/spark/logs
      - spark_work:/opt/spark/work
    networks:
      - spark-network
    restart: unless-stopped
    command: >
      sh -c "
        sleep 20 &&
        /opt/spark/sbin/start-worker.sh spark://spark-master:7077 &&
        tail -f /opt/spark/logs/spark-*-org.apache.spark.deploy.worker.Worker-*.out
      "

  # Spark Worker 2
  spark-worker-2:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker-2
    depends_on:
      - spark-master
      - minio
    env_file:
      - ./env.minio.example
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT:-http://minio:9000}
      - STORAGE_ACCESS_KEY_ID=${STORAGE_ACCESS_KEY_ID:-minioadmin}
      - STORAGE_SECRET_KEY=${STORAGE_SECRET_KEY:-minioadmin}
    volumes:
      - ./data:/app/data:ro
      - ./output:/app/output
      - spark_logs:/opt/spark/logs
      - spark_work:/opt/spark/work
    networks:
      - spark-network
    restart: unless-stopped
    command: >
      sh -c "
        sleep 20 &&
        /opt/spark/sbin/start-worker.sh spark://spark-master:7077 &&
        tail -f /opt/spark/logs/spark-*-org.apache.spark.deploy.worker.Worker-*.out
      "

  # Spark Worker 3
  spark-worker-3:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker-3
    depends_on:
      - spark-master
      - minio
    env_file:
      - ./env.minio.example
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT:-http://minio:9000}
      - STORAGE_ACCESS_KEY_ID=${STORAGE_ACCESS_KEY_ID:-minioadmin}
      - STORAGE_SECRET_KEY=${STORAGE_SECRET_KEY:-minioadmin}
    volumes:
      - ./data:/app/data:ro
      - ./output:/app/output
      - spark_logs:/opt/spark/logs
      - spark_work:/opt/spark/work
    networks:
      - spark-network
    restart: unless-stopped
    command: >
      sh -c "
        sleep 20 &&
        /opt/spark/sbin/start-worker.sh spark://spark-master:7077 &&
        tail -f /opt/spark/logs/spark-*-org.apache.spark.deploy.worker.Worker-*.out
      "



volumes:
  postgres-db-volume:
  minio-data:
  spark_logs:
  spark_work:

networks:
  spark-network:
