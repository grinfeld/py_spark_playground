version: '3.8'

services:
  # Apache Airflow
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - airflow-init
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
      # PySpark and Java environment
      JAVA_HOME: /usr/local/openjdk-17
      SPARK_HOME: /opt/spark
      PYTHONPATH: /opt/airflow/dags:/opt/airflow/plugins
      # Spark job configuration
      STORAGE_BUCKET: spark-data
      CATALOG_TYPE: hadoop
      CATALOG_NAME: spark_catalog
      CATALOG_WAREHOUSE_NAME: iceberg-warehouse
      CATALOG_IO_IMPL: org.apache.iceberg.aws.s3.S3FileIO
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./config_manager.py:/opt/airflow/dags/config_manager.py
      - ./storage_utils.py:/opt/airflow/dags/storage_utils.py
      - ./spark_job.py:/opt/airflow/dags/spark_job.py
      - ./requirements.txt:/opt/airflow/requirements.txt
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - airflow-init
    environment:
      <<: *airflow-common-env
      # Spark job configuration
      STORAGE_BUCKET: spark-data
      CATALOG_TYPE: hadoop
      CATALOG_NAME: spark_catalog
      CATALOG_WAREHOUSE_NAME: iceberg-warehouse
      CATALOG_IO_IMPL: org.apache.iceberg.aws.s3.S3FileIO
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./config_manager.py:/opt/airflow/dags/config_manager.py
      - ./storage_utils.py:/opt/airflow/dags/storage_utils.py
      - ./spark_job.py:/opt/airflow/dags/spark_job.py
      - ./requirements.txt:/opt/airflow/requirements.txt
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./config_manager.py:/opt/airflow/dags/config_manager.py
      - ./storage_utils.py:/opt/airflow/dags/storage_utils.py
      - ./spark_job.py:/opt/airflow/dags/spark_job.py
      - ./requirements.txt:/opt/airflow/requirements.txt
    command: version
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: on-failure

  # PostgreSQL for Airflow metadata
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  # MinIO for local S3-compatible storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always



volumes:
  postgres-db-volume:
  minio-data:
